// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/product/uc.product.dep.go

// Package mock_product is a generated GoMock package.
package product

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/androsyz/inventory/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockrepoProductInterface is a mock of repoProductInterface interface.
type MockrepoProductInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoProductInterfaceMockRecorder
}

// MockrepoProductInterfaceMockRecorder is the mock recorder for MockrepoProductInterface.
type MockrepoProductInterfaceMockRecorder struct {
	mock *MockrepoProductInterface
}

// NewMockrepoProductInterface creates a new mock instance.
func NewMockrepoProductInterface(ctrl *gomock.Controller) *MockrepoProductInterface {
	mock := &MockrepoProductInterface{ctrl: ctrl}
	mock.recorder = &MockrepoProductInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoProductInterface) EXPECT() *MockrepoProductInterfaceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockrepoProductInterface) CreateProduct(ctx context.Context, product *model.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockrepoProductInterfaceMockRecorder) CreateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockrepoProductInterface)(nil).CreateProduct), ctx, product)
}

// GetProductByID mocks base method.
func (m *MockrepoProductInterface) GetProductByID(ctx context.Context, tx *sql.Tx, id int) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, tx, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockrepoProductInterfaceMockRecorder) GetProductByID(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockrepoProductInterface)(nil).GetProductByID), ctx, tx, id)
}

// GetProducts mocks base method.
func (m *MockrepoProductInterface) GetProducts(ctx context.Context) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockrepoProductInterfaceMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockrepoProductInterface)(nil).GetProducts), ctx)
}

// UpdateProduct mocks base method.
func (m *MockrepoProductInterface) UpdateProduct(ctx context.Context, product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockrepoProductInterfaceMockRecorder) UpdateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockrepoProductInterface)(nil).UpdateProduct), ctx, product)
}

// MockrepoSupplierInterface is a mock of repoSupplierInterface interface.
type MockrepoSupplierInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoSupplierInterfaceMockRecorder
}

// MockrepoSupplierInterfaceMockRecorder is the mock recorder for MockrepoSupplierInterface.
type MockrepoSupplierInterfaceMockRecorder struct {
	mock *MockrepoSupplierInterface
}

// NewMockrepoSupplierInterface creates a new mock instance.
func NewMockrepoSupplierInterface(ctrl *gomock.Controller) *MockrepoSupplierInterface {
	mock := &MockrepoSupplierInterface{ctrl: ctrl}
	mock.recorder = &MockrepoSupplierInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoSupplierInterface) EXPECT() *MockrepoSupplierInterfaceMockRecorder {
	return m.recorder
}

// GetSupplierByID mocks base method.
func (m *MockrepoSupplierInterface) GetSupplierByID(ctx context.Context, id int) (*model.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierByID", ctx, id)
	ret0, _ := ret[0].(*model.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierByID indicates an expected call of GetSupplierByID.
func (mr *MockrepoSupplierInterfaceMockRecorder) GetSupplierByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierByID", reflect.TypeOf((*MockrepoSupplierInterface)(nil).GetSupplierByID), ctx, id)
}
