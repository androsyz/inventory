// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/transaction/uc.transaction.dep.go

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/androsyz/inventory/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockrepoTransactionInterface is a mock of repoTransactionInterface interface.
type MockrepoTransactionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoTransactionInterfaceMockRecorder
}

// MockrepoTransactionInterfaceMockRecorder is the mock recorder for MockrepoTransactionInterface.
type MockrepoTransactionInterfaceMockRecorder struct {
	mock *MockrepoTransactionInterface
}

// NewMockrepoTransactionInterface creates a new mock instance.
func NewMockrepoTransactionInterface(ctrl *gomock.Controller) *MockrepoTransactionInterface {
	mock := &MockrepoTransactionInterface{ctrl: ctrl}
	mock.recorder = &MockrepoTransactionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoTransactionInterface) EXPECT() *MockrepoTransactionInterfaceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockrepoTransactionInterface) CreateTransaction(ctx context.Context, tx *sql.Tx, transaction *model.Transaction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tx, transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockrepoTransactionInterfaceMockRecorder) CreateTransaction(ctx, tx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockrepoTransactionInterface)(nil).CreateTransaction), ctx, tx, transaction)
}

// MockrepoProductInterface is a mock of repoProductInterface interface.
type MockrepoProductInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoProductInterfaceMockRecorder
}

// MockrepoProductInterfaceMockRecorder is the mock recorder for MockrepoProductInterface.
type MockrepoProductInterfaceMockRecorder struct {
	mock *MockrepoProductInterface
}

// NewMockrepoProductInterface creates a new mock instance.
func NewMockrepoProductInterface(ctrl *gomock.Controller) *MockrepoProductInterface {
	mock := &MockrepoProductInterface{ctrl: ctrl}
	mock.recorder = &MockrepoProductInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoProductInterface) EXPECT() *MockrepoProductInterfaceMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockrepoProductInterface) GetProductByID(ctx context.Context, tx *sql.Tx, id int) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, tx, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockrepoProductInterfaceMockRecorder) GetProductByID(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockrepoProductInterface)(nil).GetProductByID), ctx, tx, id)
}

// UpdateProductStock mocks base method.
func (m *MockrepoProductInterface) UpdateProductStock(ctx context.Context, tx *sql.Tx, stock, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", ctx, tx, stock, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockrepoProductInterfaceMockRecorder) UpdateProductStock(ctx, tx, stock, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockrepoProductInterface)(nil).UpdateProductStock), ctx, tx, stock, id)
}
